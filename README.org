#+title: Git & Version Control
#+options: toc:nil num:nil
#+reveal_theme: night
#+reveal_init_options: transition: 'concave'
#+reveal_root: https://cdn.jsdelivr.net/npm/reveal.js
#+export_file_name: index

* Version Control
the practice of tracking and managing changes to software code

** Why use VC?
- undo changes
- simplify collaboration
- look at previous versions

** Bad version control
filename-based \\
[[./img/bad-vc.png]]

#+REVEAL: split
unnecessary comments in code \\
#+begin_src cpp
for (int i = 1; i < Ntr; i++) {
  if (radius > turn_rad[i - 1] && radius <= turn_rad[i]) {
    // for(int j = 1; j < Nh; j++) {
    //     if (theta < heading[j-1]) {
    //         // cout << "I" << i << endl;
    //         // cout << "J" << j << endl;

    //         q11 = torque_in[i-1][j-1];
    //         q12 = torque_in[i][j-1];
    //         q21 = torque_in[i-1][j];
    //         q22 = torque_in[i][j];

    //         // torque_out = sqrt(q22 - q12) * q22/q11;
    //         torque_out = abs(sqrt(q22 - q12) * q22/q11);

    //         cout << "T_Out:" << t_out << endl;
    //     }
    // }
    q11 = torque_in[i - 1][0];
    q22 = torque_in[i][0];
    torque_out = q22 / q11;
  }
}
#+end_src

* what is ~git~?
~git~ is a *good* version control tool

it is a /command line utility/ \\
(but can be used via GUI clients)

* installing ~git~
download from https://git-scm.com/downloads

#+REVEAL: split
make sure to enable
- Git on PATH (for Git Bash and CMD integration)
- CRLF Normalization
- MinTTY

* चलिए शुरू करते हैं
बिना किसी...
** configure Git
~git~ associates your name and email with every change you make

inside a terminal:

#+BEGIN_SRC shell
$ git config --global user.name "Your Name"
#+END_SRC

#+BEGIN_SRC shell
$ git config --global user.email "youremail@domain.com"
#+END_SRC

** make a new repo
[[./img/git-innit.jpeg]]

#+REVEAL: split
step by step:
1. ~mkdir [folder_name]~
2. ~cd [folder_name]~
3. ~git init~

*** repository "repo"
a folder containing your code

every git repo contains a ~.git~ folder \\
it stores *all* of your changes, don't mess with it (manually)

** use an existing repo
#+BEGIN_SRC shell
$ git clone [path]
#+END_SRC

creates a new folder in your current directory

#+BEGIN_SRC shell
$ git clone [path] [destination]
#+END_SRC

clones the repo at /destination/

#+REVEAL: split
/path/ is usually a git repo link:

- a link to a remote repo
  #+BEGIN_SRC shell
$ git clone https://github.com/github/training-kit.git
#+END_SRC

- it can also be a repository on your computer
  #+BEGIN_SRC shell
$ git clone ./path-to-existing-repo ./new-clone
#+END_SRC

* git commands
** terminal command syntax
#+BEGIN_EXPORT html
<p><code class="fragment">git</code> <code class="fragment">[subcommand]</code> <code class="fragment">[options]</code></p>
#+END_EXPORT

** git status
tells you the status of your repository

*can tell you what to do next

*** a few important terms
#+ATTR_REVEAL: :frag t
- *untracked*: new files, known to git but not *tracked*
#+ATTR_REVEAL: :frag t
- *staging*: collect related changes, put them on a *stage*
#+ATTR_REVEAL: :frag t
- *commit*: document these changes file-by-file, line-by-line \\

#+REVEAL: split
a *commit* stores
- a descriptive comment
- metadata
- changed lines
- commit id

*** create your first commit
inside the new repo you created with ~git init~, create ~README.md~

#+begin_src shell
$ echo "Hello world!" > README.md
#+end_src

#+REVEAL: split
#+begin_src shell
$ git status
#+end_src
will tell you about the changes to your file

#+begin_src shell
on branch master

no commits yet

untracked files:
  (use "git add <file>..." to include in what will be committed)
	README.md

nothing added to commit but untracked files present (use "git add" to track)
#+end_src

** git add
#+begin_src shell
$ git add README.md
#+end_src
will "add" ~README.md~ to the /staging/ area

#+begin_src shell
on branch master

no commits yet

changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   README.md
#+end_src

** git commit
#+begin_src shell
$ git commit -m "Commit message"
#+end_src
will "commit" this change and store it permanently

#+begin_src shell
[master (root-commit) 04e48d4] Initial Commit
 1 file changed, 3 insertions(+)
 create mode 100644 README.md
#+end_src

#+REVEAL: split
running \\
~git status~ \\
again will tell you the updated status of your repo

#+begin_src shell
on branch master
nothing to commit, working tree clean
#+end_src

** step by step:
1. Create changes (add/edit/remove)
2. ~$ git status~
3. ~$ git add [filename]~
4. ~$ git commit -m "Meaningful commit message"~
5. Repeat

*more parts coming soon!

* when & what to commit
#+ATTR_REVEAL: :frag roll-in
~git~ is only as good as your /commits/

#+REVEAL: split
Write in present tense, imperative mood

Ex:
- Add README with title and summary
- Rewrite presentation section on commit messages

#+ATTR_REVEAL: :frag roll-in
*commits should sound like commands

#+REVEAL: split
try to combine multiple related changes into one commit

making inefficient commits causes problems later

#+ATTR_REVEAL: :frag roll-in
commits are checkpoints, you can revert them

#+REVEAL: split
*good commit history*:
#+BEGIN_SRC
Update Navbar component

fixes #42
- add border-radius
- fix bug around mobile view
#+END_SRC

*bad commit history (and commit messages)*:
#+BEGIN_SRC
- navbar
- sorry
- navbar styles
- typo
#+END_SRC

#+ATTR_REVEAL: :frag roll-in
*bad commits clutter up your git history

* what is Github?
Github is a cloud-based ~git~ repository hosting service

there are several others: [[https://gitlab.com][Gitlab]], [[https://bitbucket.com][BitBucket]], self-hosted Git instances

sign up at [[https://github.com/join]]

#+REVEAL: split
*why Github?* \\
- host your code online
- extra collaboration tools
- large developer community

#+REVEAL: split
a Github repo is simply a ~git~ repo on a server

we can:
a. use ~git~ on a terminal
b. interact through the site itself (via a browser)

#+REVEAL: split
[[./img/github-repo.png]] \\

** create your own repository
1. Go to https://github.com/new
2. Provide a name and description \\

*don't initialize the repo with README (for now)

#+REVEAL: split
[[./img/github-empty-repo.png]]

** clone your new repo
1. copy the ~git~ URL \\
   ~https://github.com/yourname/repo.git~
2. ~$ git clone [copied_url_path]~
3. ~$ cd [repo_name]~

** connect your local repo to the remote repo
inside your local repo

#+BEGIN_SRC shell
$ git remote add origin [copied_url_path]
#+END_SRC

*** OR
copy the contents of your local repo to the cloned repo

you will need to recreate your commits

#+ATTR_REVEAL: :frag roll-in
the ~.git~ directory stores *ALL* info related to your project, \\
∴ different ~.git~ == no commit/history

#+ATTR_REVEAL: :frag roll-in
*esp useful when things go wrong

** git fetch
syncs your remotes

** git push
#+begin_src shell
$ git push -u [remote] [branch]
#+end_src

~git push -u origin main~ \\
/pushes/ changes from your local *main* branch to the remote repo (aka origin)

#+ATTR_REVEAL: :frag roll-in
~git push~ remembers your remote

** git workflow (updated):
1. ~$ git fetch~
2. Create changes (add/edit/remove)
3. ~$ git status~
4. ~$ git add [filename]~
5. ~$ git commit -m "Meaningful commit message"~
6. Repeat
7. ~$ git push~

** how to do *X* in Git?
https://stackoverflow.com/search?q=how+to+do+X+in+Git

* Branching and Merging
#+REVEAL: split
#+CAPTION: branches allow you to work on multiple features/fixes simultaneously
[[./img/branch.svg]]

#+REVEAL: split
- ~main~ / ~master~: git's default branch
\\
- ~HEAD~: alias to current branch

*** when to create branches
several approaches

- testing, staging, prod etc
- 1 feature/1 branch
- 1 dev/1 branch
- combination of the above

* Demonstration
[[./img/branching-1.png]]
*** create new branch
assuming working on some issue #53
#+BEGIN_SRC shell
$ git branch iss53
$ git checkout iss53
#+END_SRC
OR
#+BEGIN_SRC shell
$ git checkout -b iss53
#+END_SRC

#+REVEAL: split
[[./img/branching-2.png]]

*** add some changes to feature "iss53"
add file, commit file
[[./img/branching-3.png]]

#+REVEAL: split
go back to continuing work on master
#+BEGIN_SRC shell
$ git checkout master
#+END_SRC

...

now there is some urgent issue, new fix required

*** create hotfix branch
#+BEGIN_SRC shell
$ git checkout -b hotfix
#+END_SRC
resolve bug, commit changes
[[./img/branching-4.png]]

*** bring master to hotfix
go back to master
#+BEGIN_SRC shell
$ git checkout master
#+END_SRC

*merge* master to hotfix
#+BEGIN_SRC shell
$ git merge hotfix
#+END_SRC

#+REVEAL: split
master is now on hotfix (HEAD = master == hotfix)
[[./img/branching-5.png]]

#+REVEAL: split
hotfix no longer required, can safely delete hotfix
#+BEGIN_SRC shell
$ git branch -d hotfix
#+END_SRC

continue working on *iss53*
#+BEGIN_SRC shell
$ git checkout iss53
# make changes, add commits
#+END_SRC

*** issue #53 completed, let's merge it in master
#+BEGIN_SRC shell
$ git checkout master
$ git merge iss53
#+END_SRC
[[./img/merging-1.png]]

#+reveal: split
[[./img/merging-2.png]]

* Merge Conflicts
such pain, much wow

#+REVEAL: split
if you changed the same part of the same file differently in the two branches you’re merging, Git won’t be able to merge them cleanly

Git does not know which change to keep

#+REVEAL: split
ergo, MeRgE CoNFliCts - Git asks you which change to keep
#+BEGIN_SRC
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
#+END_SRC

